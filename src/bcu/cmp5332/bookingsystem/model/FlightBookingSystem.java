package bcu.cmp5332.bookingsystem.model;

import bcu.cmp5332.bookingsystem.main.FlightBookingSystemException;
import java.time.LocalDate;
import java.util.*;

/**
 * 
 * @author VishaljiODEDRA
 * @author DhananjayTiwari
 */

/**
 * A class that represents a flight booking system.
 * 
 * The flight booking system stores information about customers, flights, and bookings.
 * It provides methods for adding and removing flights and customers, and for retrieving
 * information about these entities.
 */

public class FlightBookingSystem {
    
    private final LocalDate systemDate = LocalDate.parse("2020-11-11");
    
    private final Map<Integer, Customer> customers = new TreeMap<>();
    private final Map<Integer, Flight> flights = new TreeMap<>();

    /**
     * Gets the current date of the flight booking system.
     * 
     * @return the current date of the flight booking system
     */
    public LocalDate getSystemDate() {
        return systemDate;
    }

    /**
     * Gets a list of all flights in the flight booking system.
     * 
     * The list is generated by retrieving the values of the `flights` map and
     * wrapping them in an unmodifiable list.
     * 
     * @return an unmodifiable list of all flights in the system
     */
    public List<Flight> getFlights() {
        List<Flight> out = new ArrayList<>(flights.values());
        return Collections.unmodifiableList(out);
    }
    
    /**
     * Gets a list of all customers in the flight booking system.
     * 
     * The list is generated by retrieving the values of the `customers` map and
     * wrapping them in an unmodifiable list.
     * 
     * @return an unmodifiable list of all customers in the system
     */
    public List<Customer> getCustomers(){
    	List<Customer> out=new ArrayList<>(customers.values());
    	return Collections.unmodifiableList(out);
    }
    
    /**
     * Gets a flight by its ID.
     * 
     * The flight is retrieved from the `flights` map using the specified ID as the key.
     * If no flight is found with the specified ID, a `FlightBookingSystemException` is thrown.
     * 
     * @param id the ID of the flight to retrieve
     * @return the flight with the specified ID
     * @throws FlightBookingSystemException if there is no flight with the specified ID
     */
    public Flight getFlightByID(int id) throws FlightBookingSystemException {
        if (!flights.containsKey(id)) {
            throw new FlightBookingSystemException("There is no flight with that ID.");
        }
        return flights.get(id);
    }
    
    /**
     * Gets a customer by their ID.
     * 
     * The customer is retrieved from the `customers` map using the specified ID as the key.
     * If no customer is found with the specified ID, a `FlightBookingSystemException` is thrown.
     * 
     * @param id the ID of the customer to retrieve
     * @return the customer with the specified ID
     * @throws FlightBookingSystemException if there is no customer with the specified ID
     */
    public Customer getCustomerByID(int id) throws FlightBookingSystemException {
        if (!customers.containsKey(id)) {
        	throw new FlightBookingSystemException("There is no Passenger With that ID.");
        }
        return customers.get(id);
    }
    
    /**
     * Gets the ID of a customer by their booking ID.
     * 
     * The method iterates through a list of all customers in the system, and searches
     * each customer's bookings for a booking with the specified ID. If a matching booking
     * is found, the ID of the associated customer is returned. If no matching booking is
     * found, a `FlightBookingSystemException` is thrown.
     * 
     * @param bookingId the ID of the booking to search for
     * @return the ID of the customer associated with the specified booking
     * @throws FlightBookingSystemException if there is no booking with the specified ID
     */
    public int getCustomerByBookingId(int bookingId) throws FlightBookingSystemException {
    	List<Customer> customer = new ArrayList<>(customers.values());
    	int custId = 0;
		for (Customer c : customer) {
			for (Booking b : c.getBookings()) {
				if (b.getId() == bookingId) {
					custId = c.getId();
					return custId;
				}
			}
		}
		throw new FlightBookingSystemException("Invalid Booking ID.");
    }

    /**
     * Adds a flight to the system.
     * 
     * The flight is added to the `flights` map, using the flight's ID as the key.
     * If the flight has a duplicate ID, an `IllegalArgumentException` is thrown.
     * If there is already a flight with the same number and departure date in the system,
     * a `FlightBookingSystemException` is thrown.
     * 
     * @param flight the flight to add
     * @throws IllegalArgumentException if the flight has a duplicate ID
     * @throws FlightBookingSystemException if there is already a flight with the same number and departure date in the system
     */
    public void addFlight(Flight flight) throws FlightBookingSystemException {
        if (flights.containsKey(flight.getId())) {
            throw new IllegalArgumentException("Duplicate flight ID.");
        }
        for (Flight existing : flights.values()) {
            if (existing.getFlightNumber().equals(flight.getFlightNumber()) 
                && existing.getDepartureDate().isEqual(flight.getDepartureDate())) {
                throw new FlightBookingSystemException("There is a flight with same "
                        + "number and departure date in the system");
            }
        }
        flights.put(flight.getId(), flight);
    }

    /**
     * Adds a customer to the system.
     * 
     * The customer is added to the `customers` map, using the customer's ID as the key.
     * If the customer has a duplicate ID, an `IllegalArgumentException` is thrown.
     * If there is already a customer with the same email or phone number in the system,
     * a `FlightBookingSystemException` is thrown.
     * 
     * @param customer the customer to add
     * @throws IllegalArgumentException if the customer has a duplicate ID
     * @throws FlightBookingSystemException if there is already a customer with the same email or phone number in the system
     */
    public void addCustomer(Customer customer)throws IllegalArgumentException,FlightBookingSystemException {
        if(customers.containsKey(customer.getId())) {
        	throw new IllegalArgumentException("Duplicate Passenger ID.");
        	
        }
        for(Customer existing: customers.values()) {
        	if(existing.getEmail().equals(customer.getEmail())||existing.getPhone().equals(customer.getPhone())) {
        		throw new FlightBookingSystemException("There is a Passenger with same Email or Phone Number in the System.");
        	}
        }
        customers.put(customer.getId(), customer);
        }
    
        
}
